{"version":3,"sources":["services/Calculadora.service.js","components/Calculadora.js","reportWebVitals.js","index.js"],"names":["CalculadoraService","numero1","numero2","operacao","resultado","numeroAtual","numeroConcat","indexOf","Calculadora","calcular","concatenarNumero","SOMA","SUBTRACAO","DIVISAO","MULTIPLICACAO","useState","txtNumeros","setTxtNumeros","setNumero1","setNumero2","setOperacao","adicionarNumero","numero","definirOperacao","op","parseFloat","toString","className","Container","Row","Col","xs","Button","variant","onClick","Form","Control","type","name","readOnly","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21159b69.chunk.js","sourcesContent":["function CalculadoraService() {\n\n  const SOMA = '+';\n  const SUBTRACAO = '-';\n  const MULTIPLICACAO = '*';\n  const DIVISAO = '/';\n\n  function calcular(numero1, numero2, operacao) {\n    let resultado;\n\n    switch (operacao) {\n      case SOMA:\n        resultado = numero1 + numero2;\n        break;\n      case SUBTRACAO:\n        resultado = numero1 - numero2;\n        break;\n      case MULTIPLICACAO:\n        resultado = numero1 * numero2;\n        break;\n      case DIVISAO:\n        resultado = numero1 / numero2;\n        break;\n      default:\n        resultado = 0;\n        break;\n    }\n\n    return resultado;\n  }\n\n  function concatenarNumero(numeroAtual, numeroConcat) {\n    // Caso contenha apenas '0' ou null, reinicia o valor\n    if (numeroAtual === '0' || numeroAtual === null) {\n      numeroAtual = '';\n    }\n\n    // Primeiro digito for '.' concatena '0' antes do ponto\n    if (numeroConcat === '.' && numeroAtual === '0') {\n      return '0.';\n    }\n\n    // Caso '.' digitado e ja contenha um ponto, apenas retornar\n    if (numeroConcat === '.' && numeroAtual.indexOf('.') > -1) {\n      return numeroAtual;\n    }\n\n    return numeroAtual + numeroConcat;\n  }\n\n  return [calcular, concatenarNumero, SOMA, SUBTRACAO, DIVISAO, MULTIPLICACAO];\n}\n\nexport default CalculadoraService;\n","import React, { useState } from \"react\";\n// import { render } from \"react-dom\";\nimport CalculadoraService from '../services/Calculadora.service';\nimport '../css/Calculadora.css';\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\n\nfunction Calculadora() {\n\n  const [calcular, concatenarNumero, SOMA, SUBTRACAO, DIVISAO, MULTIPLICACAO] = CalculadoraService();\n\n  const [txtNumeros, setTxtNumeros] = useState('0');\n  const [numero1, setNumero1] = useState('0');\n  const [numero2, setNumero2] = useState(null);\n  const [operacao, setOperacao] = useState(null);\n\n  function adicionarNumero(numero) {\n    let resultado;\n\n    if (operacao === null) {\n      resultado = concatenarNumero(numero1, numero);\n      setNumero1(resultado);\n    } else {\n      resultado = concatenarNumero(numero2, numero);\n      setNumero2(resultado);\n    }\n\n    setTxtNumeros(resultado);\n  }\n\n  function definirOperacao(op) {\n    // apenas define a operacao caso ela nao exista\n    if (operacao === null) {\n      setOperacao(op);\n      return;\n    }\n    // caso a operacao estiver definida e numero 2 selecionado, realiza o calculo da operacao\n    if (numero2 !== null) {\n      const resultado = calcular(parseFloat(numero1), parseFloat(numero2), operacao);\n      setOperacao(op);\n      setNumero1(resultado.toString());\n      setNumero2(null);\n      setTxtNumeros(resultado.toString());\n    }\n  }\n\n  function acaoCalcular() {\n    if (numero2 === null) {\n      return;\n    }\n    const resultado = calcular(parseFloat(numero1), parseFloat(numero2), operacao);\n    setTxtNumeros(resultado);\n  }\n\n  function limpar() {\n    setTxtNumeros('0');\n    setNumero1('0');\n    setNumero2(null);\n    setOperacao(null);\n  }\n\n  return (\n    <section className=\"calc-section\">\n      <div className=\"jumbotron\">\n        <Container>\n          <Row>\n            <Col xs=\"3\">\n              <Button variant=\"warning\" onClick={ limpar }>C</Button>\n            </Col>\n            <Col xs=\"9\">\n              <Form.Control\n                type=\"text\"\n                name=\"txtNumeros\"\n                className=\"text-right\"\n                readOnly=\"readonly\"\n                value={ txtNumeros }\n                data-testid=\"txtNumeros\"\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('7') }>7</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('8') }>8</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('9') }>9</Button>\n            </Col>\n            <Col>\n              <Button variant=\"info\" onClick={ () => definirOperacao(DIVISAO) }>/</Button>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('4') }>4</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('5') }>5</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('6') }>6</Button>\n            </Col>\n            <Col>\n              <Button variant=\"info\" onClick={ () => definirOperacao(MULTIPLICACAO) }>*</Button>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('1') }>1</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('2') }>2</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('3') }>3</Button>\n            </Col>\n            <Col>\n              <Button variant=\"info\" onClick={ () => definirOperacao(SUBTRACAO) }>-</Button>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('0') }>0</Button>\n            </Col>\n            <Col>\n              <Button variant=\"light\" onClick={ () => adicionarNumero('.') }>.</Button>\n            </Col>\n            <Col>\n              <Button variant=\"success\" onClick={ acaoCalcular }>=</Button>\n            </Col>\n            <Col>\n              <Button variant=\"info\" onClick={ () => definirOperacao(SOMA) }>+</Button>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </section>\n  );\n}\n\nexport default Calculadora;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculadora from './components/Calculadora';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculadora />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}